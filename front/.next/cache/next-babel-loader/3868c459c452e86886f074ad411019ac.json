{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"\\uC77C\\uB2E8 \\uAC00\\uBCF4\\uC790\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = async context => {\n  const {\n    ctx\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    //서버쪽에서 데이터를 불러오기\n    ctx.store.dispatch({\n      //ssr을 하기 위한 것\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (context.Component.getInitialProps) {\n    pageProps = await context.Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // const middleware = [sagaMiddleware, (store) => (next) => (action) =>{\n  //   console.log(action);\n  //   next(action);\n  // }]; redux-saga에서 에러터질때 확인하기\n\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/_app.js"],"names":["React","Head","PropTypes","withRedux","withReduxSaga","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","AppLayout","reducer","rootSaga","LOAD_USER_REQUEST","axios","NodeBird","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\n\nconst NodeBird = ({ Component, store, pageProps }) => {\n  return (\n    <Provider store={store}>\n      <Head>\n        <title>일단 가보자</title>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\n      </Head>\n      <AppLayout>\n        <Component {...pageProps}/>\n      </AppLayout>\n    </Provider>\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = async (context) => {\n  const { ctx } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n  if(ctx.isServer && cookie){\n    axios.defaults.headers.Cookie = cookie;\n  }\n  if(!state.user.me){ //서버쪽에서 데이터를 불러오기\n    ctx.store.dispatch({  //ssr을 하기 위한 것\n      type: LOAD_USER_REQUEST\n    })\n  }\n  if(context.Component.getInitialProps){\n    pageProps = await context.Component.getInitialProps(ctx);\n  }\n  \n  return { pageProps };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  // const middleware = [sagaMiddleware, (store) => (next) => (action) =>{\n  //   console.log(action);\n  //   next(action);\n  // }]; redux-saga에서 에러터질때 확인하기\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}