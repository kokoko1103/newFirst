{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  var dispatch = useDispatch();\n  var countRef = useRef([]);\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost;\n\n  var onScroll = useCallback(function () {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        var lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId: lastId,\n            data: tag\n          });\n          countRef.current.push(lastId);\n        }\n\n        console.log('라스트아이디 찾기', mainPosts[mainPosts.length - 1].id);\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n};\n\nHashtag.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var tag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tag = context.query.tag;\n            context.store.dispatch({\n              type: LOAD_HASHTAG_POSTS_REQUEST,\n              data: tag\n            });\n            return _context.abrupt(\"return\", {\n              tag: tag\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Hashtag;","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/hashtag.js"],"names":["React","useCallback","useEffect","useRef","PropTypes","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","PostCard","Hashtag","tag","dispatch","countRef","state","post","mainPosts","hasMorePost","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","data","push","console","log","addEventListener","removeEventListener","map","c","propTypes","string","isRequired","getInitialProps","context","query","store"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC3B,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,QAAQ,GAAGT,MAAM,CAAC,EAAD,CAAvB;;AAF2B,qBAIQG,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAJnB;AAAA,MAInBC,SAJmB,gBAInBA,SAJmB;AAAA,MAIRC,WAJQ,gBAIRA,WAJQ;;AAM3B,MAAMC,QAAQ,GAAGhB,WAAW,CAAC,YAAM;AACjC,QAAIiB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAIP,WAAJ,EAAiB;AACb,YAAIQ,MAAM,GAAGT,SAAS,CAACA,SAAS,CAACU,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA5C;;AACA,YAAG,CAACd,QAAQ,CAACe,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAJ,EAAsC;AACpCb,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAEtB,0BADD;AAELiB,YAAAA,MAAM,EAANA,MAFK;AAGLM,YAAAA,IAAI,EAAEpB;AAHD,WAAD,CAAR;AAKEE,UAAAA,QAAQ,CAACe,OAAT,CAAiBI,IAAjB,CAAsBP,MAAtB;AACH;;AACDQ,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBlB,SAAS,CAACA,SAAS,CAACU,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAAvD;AACH;AACF;AACF,GAf2B,EAezB,CAACV,WAAD,EAAcD,SAAS,CAACU,MAAxB,CAfyB,CAA5B;AAiBAvB,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,MAAM,CAACgB,gBAAP,CAAwB,QAAxB,EAAkCjB,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACiB,mBAAP,CAA2B,QAA3B,EAAqClB,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACF,SAAS,CAACU,MAAX,CALM,CAAT;AAOA,SACE,mBACGV,SAAS,CAACqB,GAAV,CAAc,UAAAC,CAAC;AAAA,WACd,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACX,EAAjB;AAAqB,MAAA,IAAI,EAAEW;AAA3B,MADc;AAAA,GAAf,CADH,CADF;AAOD,CArCD;;AAuCA5B,OAAO,CAAC6B,SAAR,GAAoB;AAClB5B,EAAAA,GAAG,EAAEN,SAAS,CAACmC,MAAV,CAAiBC;AADJ,CAApB;;AAIA/B,OAAO,CAACgC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBhC,YAAAA,GADkB,GACZgC,OAAO,CAACC,KAAR,CAAcjC,GADF;AAExBgC,YAAAA,OAAO,CAACE,KAAR,CAAcjC,QAAd,CAAuB;AACrBkB,cAAAA,IAAI,EAAEtB,0BADe;AAErBuB,cAAAA,IAAI,EAAEpB;AAFe,aAAvB;AAFwB,6CAMjB;AAAEA,cAAAA,GAAG,EAAHA;AAAF,aANiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AASA,eAAeD,OAAf","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nconst Hashtag = ({ tag }) => {\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n          let lastId = mainPosts[mainPosts.length -1].id;\n          if(!countRef.current.includes(lastId)){\n            dispatch({\n                type: LOAD_HASHTAG_POSTS_REQUEST,\n                lastId,\n                data: tag,\n              });\n              countRef.current.push(lastId);\n          }\n          console.log('라스트아이디 찾기',mainPosts[mainPosts.length -1].id);\n      }\n    }\n  }, [hasMorePost, mainPosts.length]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n\n  return (\n    <div>\n      {mainPosts.map(c => (\n        <PostCard key={c.id} post={c} />\n      ))}\n    </div>\n  );\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired,\n};\n\nHashtag.getInitialProps = async (context) => {\n  const tag = context.query.tag;\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag,\n  });\n  return { tag };\n};\n\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}