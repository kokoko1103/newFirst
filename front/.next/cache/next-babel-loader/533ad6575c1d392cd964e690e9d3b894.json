{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport Helmet from 'react-helmet';\nimport { Container } from 'next/app';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"\\uC77C\\uB2E8 \\uAC00\\uBCF4\\uC790\",\n    htmlAttributes: {\n      lang: 'ko'\n    },\n    meta: [{\n      charSet: 'UTF-8'\n    }, {\n      name: 'viewport',\n      content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n    }, {\n      'http-equiv': 'X-UA-Compatible',\n      content: 'IE=edge'\n    }, {\n      name: 'description',\n      content: '지역활성화 SNS'\n    }, {\n      name: 'og.title',\n      content: 'DOUNT'\n    }, {\n      name: 'og.description',\n      content: '지역활성화 SNS'\n    }, {\n      property: 'og.type',\n      content: 'website'\n    }],\n    link: [{\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n    }, {\n      rel: 'stylesheet',\n      href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps))));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = async context => {\n  const {\n    ctx\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    //서버쪽에서 데이터를 불러오기\n    ctx.store.dispatch({\n      //ssr을 하기 위한 것\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (context.Component.getInitialProps) {\n    pageProps = (await context.Component.getInitialProps(ctx)) || {};\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // const middleware = [sagaMiddleware, (store) => (next) => (action) =>{\n  //   console.log(action);\n  //   next(action);\n  // }]; redux-saga에서 에러터질때 확인하기\n\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/_app.js"],"names":["React","Head","PropTypes","withRedux","withReduxSaga","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","Helmet","Container","AppLayout","reducer","rootSaga","LOAD_USER_REQUEST","axios","NodeBird","Component","store","pageProps","lang","charSet","name","content","property","rel","href","propTypes","elementType","isRequired","object","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport Helmet from 'react-helmet';\nimport {Container} from 'next/app'\n\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\n\nconst NodeBird = ({ Component, store, pageProps }) => {\n  return (\n    <Container>\n      <Provider store={store}>\n        <Helmet\n          title= \"일단 가보자\"\n          htmlAttributes= {{ lang: 'ko' }}\n          meta= {[{\n            charSet: 'UTF-8'\n          },{\n            name: 'viewport',\n            content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\n          },{\n            'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\n          },{\n            name: 'description', content: '지역활성화 SNS'\n          },{\n            name: 'og.title', content: 'DOUNT'\n          },{\n            name: 'og.description', content: '지역활성화 SNS'\n          },{\n            property: 'og.type', content: 'website'\n          }]}\n          link={[{\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css',\n          }, {\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\n          }, {\n            rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\n          }]}\n        />\n        <AppLayout>\n          <Component {...pageProps}/>\n        </AppLayout>\n      </Provider>\n    </Container>\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nNodeBird.getInitialProps = async (context) => {\n  const { ctx } = context;\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';\n  if(ctx.isServer && cookie){\n    axios.defaults.headers.Cookie = cookie;\n  }\n  if(!state.user.me){ //서버쪽에서 데이터를 불러오기\n    ctx.store.dispatch({  //ssr을 하기 위한 것\n      type: LOAD_USER_REQUEST\n    })\n  }\n  if(context.Component.getInitialProps){\n    pageProps = await context.Component.getInitialProps(ctx) || {};\n  }\n  \n  return { pageProps };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  // const middleware = [sagaMiddleware, (store) => (next) => (action) =>{\n  //   console.log(action);\n  //   next(action);\n  // }]; redux-saga에서 에러터질때 확인하기\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : compose(\n      applyMiddleware(...middlewares),\n      !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(NodeBird));"]},"metadata":{},"sourceType":"module"}