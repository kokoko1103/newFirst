{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const onScroll = () => {\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 250) {\n      if (hasMorePost) {\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id\n        });\n      }\n    }\n\n    console.log(mainPosts[mainPosts.length - 1].id);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n  //console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","randomBytes","Home","me","state","user","mainPosts","hasMorePost","post","dispatch","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAA9C;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AACA,QAAMa,QAAQ,GAAG,MAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA6BC,QAAQ,CAACC,eAAT,CAAyBC,YAAtD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,QAAGL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAAnG,EAAuG;AACrG,UAAGX,WAAH,EAAe;AACbE,QAAAA,QAAQ,CAAC;AACPU,UAAAA,IAAI,EAAEnB,uBADC;AAEPoB,UAAAA,MAAM,EAAEd,SAAS,CAACA,SAAS,CAACe,MAAV,GAAkB,CAAnB,CAAT,CAA+BC;AAFhC,SAAD,CAAR;AAID;AACF;;AACDX,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAS,CAACA,SAAS,CAACe,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA3C;AACD,GAXD;;AAaA3B,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,MAAM;AACXG,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACD,KAFD;AAGD,GALQ,EAKP,CAACJ,SAAS,CAACe,MAAX,CALO,CAAT;AAOA,SACE,mBACGlB,EAAE,IAAI,MAAC,QAAD,OADT,EAEGG,SAAS,CAACmB,GAAV,CAAeC,CAAD,IAAO;AACpB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA;AAAxB,MADF;AAGD,GAJA,CAFH,CADF;AAUD,CAlCD;;AAoCAxB,IAAI,CAACyB,eAAL,GAAuB,MAAQC,OAAR,IAAoB;AAAG;AAC5C;AACAA,EAAAA,OAAO,CAACC,KAAR,CAAcpB,QAAd,CAAuB;AACrBU,IAAAA,IAAI,EAAEnB;AADe,GAAvB;AAGD,CALD;;AAOA,eAAeE,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nconst Home = () => {\n  const { me } = useSelector(state => state.user);\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onScroll = () => {\n    console.log(window.scrollY,  document.documentElement.clientHeight,document.documentElement.scrollHeight);\n    if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight -250){\n      if(hasMorePost){\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length -1].id,\n        });\n      }\n    }\n    console.log(mainPosts[mainPosts.length -1].id);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }\n  },[mainPosts.length]);\n\n  return (\n    <div>\n      {me && <PostForm />}\n      {mainPosts.map((c) => {\n        return (\n          <PostCard key={c} post={c} />\n        );\n      })}\n    </div>\n  );\n};\n\nHome.getInitialProps = async ( context) => {  //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n  //console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  })\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}