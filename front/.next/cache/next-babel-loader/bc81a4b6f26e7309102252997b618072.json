{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n\n  const onScroll = () => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 250) {\n      if (hasMorePost) {\n        let lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps = async context => {\n  //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n  //console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/index.js"],"names":["React","useEffect","useRef","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","randomBytes","Home","me","state","user","mainPosts","hasMorePost","post","dispatch","countRef","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAA9C;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,QAAQ,GAAGf,MAAM,CAAC,EAAD,CAAvB;;AACA,QAAMgB,QAAQ,GAAG,MAAM;AACrB,QAAGC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAAnG,EAAuG;AACrG,UAAGV,WAAH,EAAe;AACb,YAAIW,MAAM,GAAGZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA5C;;AACA,YAAG,CAACV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAJ,EAAsC;AACpCT,UAAAA,QAAQ,CAAC;AACPc,YAAAA,IAAI,EAAEvB,uBADC;AAEPkB,YAAAA;AAFO,WAAD,CAAR;AAIAR,UAAAA,QAAQ,CAACW,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACD;AACF;AACF;AACF,GAbD;;AAeAxB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACD,KAFD;AAGD,GALQ,EAKP,CAACL,SAAS,CAACa,MAAX,CALO,CAAT;AAOA,SACE,mBACGhB,EAAE,IAAI,MAAC,QAAD,OADT,EAEGG,SAAS,CAACqB,GAAV,CAAeC,CAAD,IAAO;AACpB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACR,EAAjB;AAAqB,MAAA,IAAI,EAAEQ;AAA3B,MADF;AAGD,GAJA,CAFH,CADF;AAUD,CArCD;;AAuCA1B,IAAI,CAAC2B,eAAL,GAAuB,MAAQC,OAAR,IAAoB;AAAG;AAC5C;AACAA,EAAAA,OAAO,CAACC,KAAR,CAActB,QAAd,CAAuB;AACrBc,IAAAA,IAAI,EAAEvB;AADe,GAAvB;AAGD,CALD;;AAOA,eAAeE,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nconst Home = () => {\n  const { me } = useSelector(state => state.user);\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const onScroll = () => {\n    if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight -250){\n      if(hasMorePost){\n        let lastId = mainPosts[mainPosts.length -1].id;\n        if(!countRef.current.includes(lastId)){\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }\n  },[mainPosts.length]);\n\n  return (\n    <div>\n      {me && <PostForm />}\n      {mainPosts.map((c) => {\n        return (\n          <PostCard key={c.id} post={c} />\n        );\n      })}\n    </div>\n  );\n};\n\nHome.getInitialProps = async ( context) => {  //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n  //console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  })\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}