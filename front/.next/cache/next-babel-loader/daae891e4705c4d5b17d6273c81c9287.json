{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nvar Home = function Home() {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost;\n\n  var dispatch = useDispatch();\n\n  var onScroll = function onScroll() {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 250) {\n      if (hasMorePost) {\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id\n        });\n      }\n    }\n\n    console.log(mainPosts[mainPosts.length - 1].id);\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c,\n      post: c\n    });\n  }));\n};\n\nHome.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n            //console.log(Object.keys(context));\n            context.store.dispatch({\n              type: LOAD_MAIN_POSTS_REQUEST\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Home;","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","randomBytes","Home","state","user","me","post","mainPosts","hasMorePost","dispatch","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","console","log","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,qBACFN,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CADT;AAAA,MACTC,EADS,gBACTA,EADS;;AAAA,sBAEkBT,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAF7B;AAAA,MAETC,SAFS,iBAETA,SAFS;AAAA,MAEEC,WAFF,iBAEEA,WAFF;;AAGjB,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AACA,MAAMa,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAGC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAAnG,EAAuG;AACrG,UAAGR,WAAH,EAAe;AACbC,QAAAA,QAAQ,CAAC;AACPQ,UAAAA,IAAI,EAAEjB,uBADC;AAEPkB,UAAAA,MAAM,EAAEX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAkB,CAAnB,CAAT,CAA+BC;AAFhC,SAAD,CAAR;AAID;AACF;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYf,SAAS,CAACA,SAAS,CAACY,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA3C;AACD,GAVD;;AAYAzB,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACD,KAFD;AAGD,GALQ,EAKP,CAACH,SAAS,CAACY,MAAX,CALO,CAAT;AAOA,SACE,mBACGd,EAAE,IAAI,MAAC,QAAD,OADT,EAEGE,SAAS,CAACkB,GAAV,CAAc,UAACC,CAAD,EAAO;AACpB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA;AAAxB,MADF;AAGD,GAJA,CAFH,CADF;AAUD,CAjCD;;AAmCAxB,IAAI,CAACyB,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAQC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAuB;AAC5C;AACAA,YAAAA,OAAO,CAACC,KAAR,CAAcpB,QAAd,CAAuB;AACrBQ,cAAAA,IAAI,EAAEjB;AADe,aAAvB;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeE,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\nimport { randomBytes } from 'crypto';\n\nconst Home = () => {\n  const { me } = useSelector(state => state.user);\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onScroll = () => {\n    if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight -250){\n      if(hasMorePost){\n        dispatch({\n          type: LOAD_MAIN_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length -1].id,\n        });\n      }\n    }\n    console.log(mainPosts[mainPosts.length -1].id);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }\n  },[mainPosts.length]);\n\n  return (\n    <div>\n      {me && <PostForm />}\n      {mainPosts.map((c) => {\n        return (\n          <PostCard key={c} post={c} />\n        );\n      })}\n    </div>\n  );\n};\n\nHome.getInitialProps = async ( context) => {  //ssr을 하기위해서 사용하는 것이다. next에서 지원해준다.\n  //console.log(Object.keys(context));\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  })\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}