{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nconst Hashtag = ({\n  tag\n}) => {\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        let lastId = mainPosts[mainPosts.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId,\n            data: tag\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n\n    console.log('라스트아이디 찾기', mainPosts[mainPosts.length - 1].id);\n  }, [hasMorePost, mainPosts.length]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n};\n\nHashtag.getInitialProps = async context => {\n  const tag = context.query.tag;\n  console.log('hashtag getInitialProps', tag);\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag\n  });\n  return {\n    tag\n  };\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["/Users/hyundong/react-bird/front/pages/hashtag.js"],"names":["React","useCallback","useEffect","useRef","PropTypes","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","PostCard","Hashtag","tag","dispatch","countRef","mainPosts","hasMorePost","state","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","data","push","console","log","addEventListener","removeEventListener","map","c","propTypes","string","isRequired","getInitialProps","context","query","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC3B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAGT,MAAM,CAAC,EAAD,CAAvB;AAEA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA9C;AAEA,QAAMC,QAAQ,GAAGhB,WAAW,CAAC,MAAM;AACjC,QAAIiB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAIT,WAAJ,EAAiB;AACb,YAAIU,MAAM,GAAGX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA5C;;AACA,YAAG,CAACd,QAAQ,CAACe,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAJ,EAAsC;AACpCb,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAEtB,0BADD;AAELiB,YAAAA,MAFK;AAGLM,YAAAA,IAAI,EAAEpB;AAHD,WAAD,CAAR;AAKEE,UAAAA,QAAQ,CAACe,OAAT,CAAiBI,IAAjB,CAAsBP,MAAtB;AACH;AACJ;AACF;;AAEHQ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBpB,SAAS,CAACA,SAAS,CAACY,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAAvD;AACC,GAhB2B,EAgBzB,CAACZ,WAAD,EAAcD,SAAS,CAACY,MAAxB,CAhByB,CAA5B;AAkBAvB,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,CAACgB,gBAAP,CAAwB,QAAxB,EAAkCjB,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACiB,mBAAP,CAA2B,QAA3B,EAAqClB,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACJ,SAAS,CAACY,MAAX,CALM,CAAT;AAOA,SACE,mBACGZ,SAAS,CAACuB,GAAV,CAAcC,CAAC,IACd,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACX,EAAjB;AAAqB,IAAA,IAAI,EAAEW;AAA3B,IADD,CADH,CADF;AAOD,CAtCD;;AAwCA5B,OAAO,CAAC6B,SAAR,GAAoB;AAClB5B,EAAAA,GAAG,EAAEN,SAAS,CAACmC,MAAV,CAAiBC;AADJ,CAApB;;AAIA/B,OAAO,CAACgC,eAAR,GAA0B,MAAOC,OAAP,IAAmB;AAC3C,QAAMhC,GAAG,GAAGgC,OAAO,CAACC,KAAR,CAAcjC,GAA1B;AACAsB,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCvB,GAAvC;AACAgC,EAAAA,OAAO,CAACE,KAAR,CAAcjC,QAAd,CAAuB;AACrBkB,IAAAA,IAAI,EAAEtB,0BADe;AAErBuB,IAAAA,IAAI,EAAEpB;AAFe,GAAvB;AAIA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CARD;;AAUA,eAAeD,OAAf","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nconst Hashtag = ({ tag }) => {\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\n\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n          let lastId = mainPosts[mainPosts.length -1].id;\n          if(!countRef.current.includes(lastId)){\n            dispatch({\n                type: LOAD_HASHTAG_POSTS_REQUEST,\n                lastId,\n                data: tag,\n              });\n              countRef.current.push(lastId);\n          }\n      }\n    }\n\n  console.log('라스트아이디 찾기',mainPosts[mainPosts.length -1].id);\n  }, [hasMorePost, mainPosts.length]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n\n  return (\n    <div>\n      {mainPosts.map(c => (\n        <PostCard key={c.id} post={c} />\n      ))}\n    </div>\n  );\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired,\n};\n\nHashtag.getInitialProps = async (context) => {\n  const tag = context.query.tag;\n  console.log('hashtag getInitialProps', tag);\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag,\n  });\n  return { tag };\n};\n\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}